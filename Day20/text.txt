
//shared memory

//writer process1

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<sys/ipc.h>
#include<sys/shm.h>

#define SHM_SIZE 1024   // size of shared memory segment

int main()
{
	key_t key=ftok("shmfile",1009);   // generate unique key
	int shmid=shmget(key,SHM_SIZE,IPC_CREAT | 0666);   // create shared memory segment
	if(shmid == -1)
	{
		perror("shmget");     // Print error if shared memory creation fails
		exit(1);
	}
	
	char *shmaddr =(char*) shmat(shmid,NULL,0);  // attach to shared memory
	if(shmaddr == (char*)-1)
	{
		perror("shmat");     // Print error if attachment fails
		exit(1);
	}
	
	printf("Write Data: ");
	fgets(shmaddr,SHM_SIZE,stdin);   // Write data to shared memory
	
	printf("Data written in memory: %s\n",shmaddr);
	
	shmdt(shmaddr);    //Detach from shared memory
	
	return 0;
	
}

//reader process2

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<sys/ipc.h>
#include<sys/shm.h>

#define SHM_SIZE 1024

int main()
{
	key_t key=ftok("shmfile",1009);   // generate unique key
	int shmid=shmget(key,SHM_SIZE,0666);   // access shared memory segment
	if(shmid == -1)
	{
		perror("shmget");    // Error if segment doesn't exist or no permission
		exit(1);
	}
	
	char *shmaddr =(char*) shmat(shmid,NULL,0);  // attach to shared memory
	if(shmaddr == (char*)-1)
	{
		perror("shmat");     // Error if attachment fails
		exit(1);
	}
	
	printf("Data read in memory: %s\n",shmaddr);   // read data from shared memory
	
	shmdt(shmaddr);  //Detach from shared memory
	
	shmctl(shmid,IPC_RMID,NULL); // remove shared memory segment
	
	return 0;
}

output:

[2021ict09@fedora ~]$ touch shmfile
[2021ict09@fedora ~]$ chmod 644 shmfile
[2021ict09@fedora ~]$ vi writer.c
[2021ict09@fedora ~]$ gcc writer.c -o writer
[2021ict09@fedora ~]$ vi reader.c
[2021ict09@fedora ~]$ gcc reader.c -o reader
[2021ict09@fedora ~]$ ./writer
Write Data: Today is Monday
Data written in memory: Today is Monday

[2021ict09@fedora ~]$ ./reader
Data read in memory: Today is Monday


/*
child --> write hello
parent --> read the message from child
*/

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/mman.h>
#include<sys/wait.h>

int main()
{
    // Size of shared memory region
	size_t size=4096;
	
	// Create an anonymous shared memory mapping accessible by parent and child
	char *shared_mem = mmap(NULL,size,PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS , -1,0);
	if(shared_mem == MAP_FAILED)
	{
		perror("mmap failed");
		exit(1);
	}
	
	pid_t pid=fork();
	if(pid==0)
	{
		//child process
		sprintf(shared_mem, "Hello from child!");
		printf("Child Wrote: %s\n",shared_mem);
		exit(0);
	}
	
	else if(pid>0)
	{
		//parent process
		wait(NULL); // wait for child to finish
		printf("Parent read: %s\n", shared_mem);
		munmap(shared_mem,size);
	}
	
	else
	{
		perror("fork failed");
		exit(1);
	}
	return 0;
}

output:

[2021ict09@fedora ~]$ vi exercise.c
[2021ict09@fedora ~]$ gcc exercise.c -o exercise
[2021ict09@fedora ~]$ ./exercise
Child Wrote: Hello from child!
Parent read: Hello from child!
