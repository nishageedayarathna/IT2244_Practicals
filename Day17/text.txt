//01

//Write a C program that:
//Prints "Program Started"
//Pauses execution for 3 seconds using a system function
//Prints "Exiting the program."
//Exits the program cleanly using the exit() function

#include<stdio.h>  //for printf()
#include<stdlib.h> //for exit()
#include<unistd.h> //for sleep()

int main()
{
	printf("Program Started\n");
	
	printf("Sleeping for 3 seconds...\n");
	sleep(3);  //pause for 3 seconds
	
	printf("Exiting the program.\n");
	exit(0);  //clean exit
	return 0;
}


[2021ict09@fedora ~]$ vi first.c
[2021ict09@fedora ~]$ gcc first.c -o first
[2021ict09@fedora ~]$ ./first
Program Started
Sleeping for 3 seconds...
Exiting the program.

//02

//Write a C program that:
//Creates a child process using fork().
//In the child process:
//Print the child’s process ID.
//Sleep for 2 seconds.
//Exit with status code 0.
//In the parent process:
//Print its own process ID.
//Wait for the child to terminate using wait().
//Check if the child exited normally.
//Print the child’s exit status.
//Then end the parent process.
//Use appropriate system headers and demonstrate process handling with fork(), sleep(), and wait().


#include<stdio.h>
#include<stdlib.h> //for exit()
#include<unistd.h> //for fork(),sleep()
#include<sys/wait.h>  //for wait()

int main()
{
	pid_t pid; //initialize pid using pid_t data type
	printf("Parent process started. PID: %d\n",getpid());
	
	pid=fork();  //create a new child process
	
	if (pid<0)
	{
		perror("fork failed");
		exit(1);
	}
	
	else if(pid==0)
	{
		//child process
		printf("Child process. PID: %d, sleeping for 2 seconds...\n",getpid());
		sleep(2);
		printf("Child process exiting...\n");
		exit(0); //childs exits with status 0
	}
	
	else
	{
		//parent process
		int status;
		printf("Parent waiting for child to finish...\n");
		wait(&status); //wait for child to finish
		if (WIFEXITED(status))  //WIFEXITED(status) returns 
		                        //true if child terminated normally.
		{
			printf("Child exited with status: %d\n",WEXITSTATUS(status));
			//WEXITSTATUS(status) gets the actual exit code (0 here)
		}
		else
		{
			printf("Child didnot exit normally.\n");
		}
		printf("Parent process ending.\n");
	}
	return 0;
}

[2021ict09@fedora ~]$ vi second.c
[2021ict09@fedora ~]$ gcc second.c -o second
[2021ict09@fedora ~]$ ./second
Parent process started. PID: 9562
Parent waiting for child to finish...
Child process. PID: 9563, sleeping for 2 seconds...
Child process exiting...
Child exited with status: 0
Parent process ending.

//03
//first child:slept for 1 second
//second child;slept for 3 seconds
//parent:both children have finished


#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>  
#include<stdlib.h>
int main()
{
	pid_t pid1=fork();
	
	if(pid1==0)
	{
		sleep(1);
		printf("First Child:Slept for 1 second\n");
		return 0;
	}
	
	else
	{
		pid_t pid2=fork();
		
		if(pid2==0)
		{
			sleep(3);
			printf("Second Child:Slept for 3 second\n");
		    return 0;
		}
		
		wait(NULL);
		wait(NULL);
		printf("Parent:Both children have finished.\n");
		
		return 0;
	}
}

//

#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>  
#include<stdlib.h>

int main()
{
	
	printf("Parent process started... PID: %d\n",getpid());
	
	int f1=fork();
	if(f1==0)
	{
		printf("First Child process started... PID: %d , sleeping for 1 second...\n",getpid());
		sleep(1);
		printf("First Child process exiting...\n");
		exit(0);
	}
	
	else
	{
		int f2=fork();
		
		if (f2==0)
		{
			printf("Second Child process started... PID: %d , sleeping for 3 seconds...\n",getpid());
			sleep(3);
			printf("Second Child process exiting...\n");
			exit(0);
		}
		
		else
		{
			int status;
		printf("Parent waiting for child to finish...\n");
		wait(&status); 
		if (WIFEXITED(status))  
		                        
		{
			printf("Child exited with status: %d\n",WEXITSTATUS(status));
			
		}
		else
		{
			printf("Child didnot exit normally.\n");
		}
		printf("Parent process ending.\n");
		}
	}
	return 0;
}


[2021ict09@fedora ~]$ vi third1.c
[2021ict09@fedora ~]$ gcc third1.c -o third1
[2021ict09@fedora ~]$ ./third1
Parent process started... PID: 15098
Parent waiting for both children to finish...
First Child process started... PID: 15099, sleeping for 1 second...
Second Child process started... PID: 15100, sleeping for 3 seconds...
First Child process exiting...
Second Child process exiting...
Parent: Both children have finished.
Parent process ending.


//04
//First child:slleps for 2 seconds , exits with status 2.
//Second child:sleeps for 1 second , exits with status 1.
//Parent:wait twice,and prints which child (by PID or exit code)

#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>  
#include<stdlib.h>

int main()
{
	printf("Parent process started... PID:%d",getpid());
	
	int f1=fork();
	if(f1==0)
	{
		printf("First childs process started... PID:%d  , sleeping for 2 seconds",getpid());
		sleep(2);
		printf("First child process exiting...\n");
		exit(2);
	}
	
	else
	{
		int f2=fork();
		if(f2==0)
		{
			printf("Second childs process started... PID:%d  , sleeping for 1 second",getpid());
		    sleep(1);
		    printf("Second child process exiting...\n");
		    exit(1);
		}
		
		else
		{
			int status;
		    printf("Parent waiting for child to finish...\n");
		    wait(&status); 
		        if (WIFEXITED(status))  
		        {           
			        printf("Child exited with status: %d\n",WEXITSTATUS(status));
			
		        }
		        else
		        {
			        printf("Child didnot exit normally.\n");
		        }
				    wait(NULL);
					wait(NULL);
					printf("Parent: Both children have finished.\n");
		            printf("Parent process ending.\n");
		}
	}
}

#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h>

int main() {
    printf("Parent process started... PID: %d\n", getpid());

    int f1 = fork();
    if (f1 == 0) {
        printf("First Child process started... PID: %d , sleeping for 2 seconds...\n", getpid());
        sleep(2);
        printf("First Child process exiting with status 2...\n");
        exit(2);
    } else if (f1 < 0) {
        perror("Fork for First Child failed");
        exit(1);
    }

    int f2 = fork();
    if (f2 == 0) {
        printf("Second Child process started... PID: %d , sleeping for 1 second...\n", getpid());
        sleep(1);
        printf("Second Child process exiting with status 1...\n");
        exit(1);
    } else if (f2 < 0) {
        perror("Fork for Second Child failed");
        exit(1);
    }

    printf("Parent waiting for both children to finish...\n");

    // Wait for both child processes and print details
    int status;
    pid_t child_pid;

    for (int i = 0; i < 2; i++) { 
        child_pid = wait(&status);
        if (WIFEXITED(status)) {
            printf("Parent: Child with PID %d exited with status %d\n", child_pid, WEXITSTATUS(status));
        } else {
            printf("Parent: Child with PID %d did not exit normally.\n", child_pid);
        }
    }

    printf("Parent: Both children have finished.\n");
    printf("Parent process ending.\n");

    return 0;
}

[2021ict09@fedora ~]$ vi forth1.c
[2021ict09@fedora ~]$ gcc forth1.c -o forth1
[2021ict09@fedora ~]$ ./forth1
Parent process started... PID: 14648
Parent waiting for both children to finish...
First Child process started... PID: 14649 , sleeping for 2 seconds...
Second Child process started... PID: 14650 , sleeping for 1 second...
Second Child process exiting with status 1...
Parent: Child with PID 14650 exited with status 1
First Child process exiting with status 2...
Parent: Child with PID 14649 exited with status 2
Parent: Both children have finished.
Parent process ending.


//05
//The parent creates a child process.
//The child creates a grandchild process.
//The grandchild process sleeps 2 seconds and exits with status 2
//The child process waits for the grandchild , prints its exit status
//then exits with status 55


#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h>

int main() {
    printf("Parent process started... PID: %d\n", getpid());

    int child_pid = fork();
    if (child_pid == 0) { // Child process
        printf("Child process started... PID: %d\n", getpid());

        int grandchild_pid = fork();
        if (grandchild_pid == 0) { // Grandchild process
            printf("Grandchild process started... PID: %d, sleeping for 2 seconds...\n", getpid());
            sleep(2);
            printf("Grandchild process exiting with status 2...\n");
            exit(2);
        } else if (grandchild_pid < 0) {
            perror("Fork for grandchild failed");
            exit(1);
        }

        int status;
        waitpid(grandchild_pid, &status, 0); // Child waits for grandchild to finish
        if (WIFEXITED(status)) {
            printf("Child: Grandchild exited with status %d\n", WEXITSTATUS(status));
        } else {
            printf("Child: Grandchild did not exit normally.\n");
        }

        printf("Child process exiting with status 55...\n");
        exit(55);
    } else if (child_pid < 0) {
        perror("Fork for child failed");
        exit(1);
    }

    int status;
    waitpid(child_pid, &status, 0); // Parent waits for child to finish
    if (WIFEXITED(status)) {
        printf("Parent: Child exited with status %d\n", WEXITSTATUS(status));
    } else {
        printf("Parent: Child did not exit normally.\n");
    }

    printf("Parent process ending.\n");
    return 0;
}


[2021ict09@fedora ~]$ vi fifth.c
[2021ict09@fedora ~]$ gcc fifth.c -o fifth
[2021ict09@fedora ~]$ ./fifth
Parent process started... PID: 15344
Child process started... PID: 15345
Grandchild process started... PID: 15346, sleeping for 2 seconds...
Grandchild process exiting with status 2...
Child: Grandchild exited with status 2
Child process exiting with status 55...
Parent: Child exited with status 55
Parent process ending.



